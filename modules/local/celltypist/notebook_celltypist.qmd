---
title: "Module - CellTypist"
author: "SCRATCH"
execute:
  cache: true
  freeze: true
jupyter: python3
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    code-fold: show
    code-tools: true
    fig-align: 'center'
    fig-format: png
    fig-responsive: true
  ipynb: default
lightbox:
    match: auto
    effect: zoom
    loop: true
format-links: [ipynb]
---

```{python}
#| tags: [parameters]
#| include: False

import os

# Parameters
project_name   = "Project"
anndata_object = "/Users/affaustino/Projects/SCRATCH-Annotation/data/Sohrab_data_annotation/Sohrab_count/Sohrab_T_cell_counts.h5ad"
cell_database  = "/Users/affaustino/Projects/SCRATCH-Annotation/assets/cell_markers_database.csv"
cell_model     = ["Immune_All_High.pkl", "Immune_All_Low.pkl"]
organism       = "Human"
model_update   = False

# Directory and outputs
work_directory = os.getcwd()
output_object  = "{work_directory}/{project_name}_{object_label}".format(work_directory = work_directory, project_name = project_name, object_label = "celltypist_annotation.h5ad")
annot_table    = "{work_directory}/{cell_model}".format(work_directory = work_directory, cell_model = "Immune_All")

```

:::{.callout-important collapse="true"}

Here we will print the parameters

:::

# Project Name: Project

## Loading library

```{python}

import pandas as pd
import scanpy as sc
import session_info

import celltypist
from celltypist import models

```

## Loading data
```{python}

try:
    adata = sc.read_h5ad(anndata_object)
except Exception as e:
    print(f"Error loading AnnData file: {e}")

```

## Normalizing dataset

```{python}

sc.pp.normalize_total(adata, target_sum = 1e4)
sc.pp.log1p(adata)

```

```{python}

sc.pl.highest_expr_genes(adata, n_top = 20)

```

## Setting models

```{python}

models.download_models(
    force_update = model_update, model = cell_model
)

```

```{python}

model_low  = models.Model.load(model = cell_model[0])
model_high = models.Model.load(model = cell_model[1])

if organism == "Mouse":
    model_low.convert()
    model_high.convert()

```

## Prediction Low-granularity

```{python}

predictions_low = celltypist.annotate(
    adata, model = cell_model[0], majority_voting = True
)

```

```{python}

predictions_low_adata = predictions_low.to_adata()

```

```{python}

adata.obs["celltypist_cell_label_fine"] = predictions_low_adata.obs.loc[
    adata.obs.index, "majority_voting"
]
adata.obs["celltypist_conf_score_fine"] = predictions_low_adata.obs.loc[
    adata.obs.index, "conf_score"
]

```

## Prediction High-granularity

```{python}

predictions_high = celltypist.annotate(
    adata, model = cell_model[1], majority_voting = True
)

```

```{python}

predictions_high_adata = predictions_high.to_adata()

```

```{python}

adata.obs["celltypist_cell_label_coarse"] = predictions_high_adata.obs.loc[
    adata.obs.index, "majority_voting"
]
adata.obs["celltypist_conf_score_coarse"] = predictions_high_adata.obs.loc[
    adata.obs.index, "conf_score"
]

```

## UMAP reduction

```{python}

sc.tl.umap(adata)

```

```{python}
#| label: fig-umap-fine
#| fig-cap: "Figure. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."

sc.pl.umap(
    adata,
    color = ["celltypist_cell_label_fine", "celltypist_conf_score_fine"],
    frameon = False,
    sort_order = False,
    wspace = 1
)

```

```{python}
#| label: fig-umap-coarse
#| fig-cap: "Figure. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."

sc.pl.umap(
    adata,
    color = ["celltypist_cell_label_coarse", "celltypist_conf_score_coarse"],
    frameon = False,
    sort_order = False,
    wspace = 1
)

```

## Cell annotation similarity

```{python}
#| label: fig-dendrogram
#| fig-cap: "Figure. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."

sc.pl.dendrogram(adata, groupby = "celltypist_cell_label_coarse")

```

## ViolinPlot

```{python}

top_genes = dict()

for cell_type in adata.obs["celltypist_cell_label_coarse"].unique():
    markers = list(model_high.extract_top_markers(cell_type, 3))
    for gene in markers:
        if gene in list(adata.var_names):
            top_genes.setdefault(cell_type, []).append(gene)

```

```{python}

all_markers = [item for sublist in top_genes.values() for item in sublist]

```

```{python}
#| label: fig-violin
#| fig-cap: "Figure. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."

sc.pl.stacked_violin(
    adata,
    all_markers,
    groupby = 'celltypist_cell_label_coarse',
    dendrogram = True
    )

```

## Differential Expression

```{python}

sc.tl.rank_genes_groups(
    adata,
    groupby = "celltypist_cell_label_coarse",
    method = "wilcoxon",
    key_added = "dea_cell_label"
    )

```

```{python}
#| label: fig-dotplot
#| fig-cap: "Figure. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."

sc.pl.rank_genes_groups_dotplot(
    adata,
    groupby = "celltypist_cell_label_coarse",
    standard_scale = "var",
    n_genes = 5,
    key = "dea_cell_label"
    )

```

## Saving Data object

```{python}

adata.write_h5ad(output_object)

```

```{python}

adata.write_csvs(annot_table)

```

## Session info

```{python}

session_info.show()

```
